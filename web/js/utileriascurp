
    function generaCURP(apellido1, apellido2, nombre, entidadNac, fechaNac){
        let micurp, porcion1, porcion2, fechaCurp, digitoSiglo,
            porciones=generaPorciones(apellido1, apellido2, nombre);

            porcion1=porciones.substring(0,4);
            porcion2=porciones.substring(4);
            fechaCurp = fechaNac.substring(2,4)+fechaNac.substring(5,7)+fechaNac.substring(8);
            digitoSiglo = (fechaNac.substring(0,4)<2000) ? "0" : "A";
            micurp=porcion1+fechaCurp+"M"+entidadNac+porcion2+digitoSiglo;
            micurp+=calculaDigito(micurp);

        return micurp;
    }


    function estructuraCorrectaCURP(curpAValidar, entidadesNac){
        let estructuraCorrecta = true;
        
        if(curpAValidar.length==18){
            let porcion1 = curpAValidar.substring(0,4),         //posicines 1-4
                porcionFecha = curpAValidar.substring(4,10),    //posiciones 5-10
                porcionSexo = curpAValidar.substring(10,11),    //posición 11
                porcionEntidad = curpAValidar.substring(11,13), //posiciones 12-13
                porcion2 = curpAValidar.substring(13,16),       //posiciones 14-16
                porcionSiglo = curpAValidar.substring(16,17),   //posición 17
                porcionDigito = curpAValidar.substring(17,18);  //posición 18

            if(validaPorcion(porcion1,1)){
                if(porcionSexo == 'M' || porcionSexo == 'H'){
                    if(entidadesNac.indexOf(porcionEntidad) != -1){
                        if(validaPorcion(porcion2,2)){
                            if(digitos.indexOf(porcionDigito) != -1){
                                if(digitos.indexOf(porcionSiglo)!=-1){
                                    if(fechaValida(porcionFecha,1)){
                                        if(calculaDigito(curpAValidar.substring(0,17))!=(1*porcionDigito))
                                            estructuraCorrecta = false;
                                    }else
                                        estructuraCorrecta = false;
                                }else if(letrasSinTildes.indexOf(porcionSiglo)!=-1){
                                    if(fechaValida(porcionFecha,2)){
                                        if(calculaDigito(curpAValidar.substring(0,17))!=(1*porcionDigito))
                                            estructuraCorrecta = false;
                                    }else
                                        estructuraCorrecta = false;
                                }else
                                    estructuraCorrecta = false;
                            }else
                                estructuraCorrecta = false;
                        }else
                            estructuraCorrecta = false;
                    }else
                        estructuraCorrecta = false;
                }else
                    estructuraCorrecta = false;
            }else
                estructuraCorrecta = false;
        }
        else
            estructuraCorrecta = false;
        
        return estructuraCorrecta;
    }
    
    function validaPorcion(texto, porcion){
        let respuesta = true;

        switch (porcion){
            case 1:
                if(letrasSinTildes.indexOf(texto[0])==-1)
                    respuesta = false;
                else if(segundaPos.indexOf(texto[1])==-1)
                    respuesta = false;
                else if(letrasSinTildes.indexOf(texto[2])==-1)
                    respuesta =  false;
                else if(letrasSinTildes.indexOf(texto[3])==-1)
                    respuesta = false;
                break;
            case 2:
                if(consonantesSinTilde.indexOf(texto[0])==-1)
                    respuesta = false;
                else if(consonantesSinTilde.indexOf(texto[1])==-1)
                    respuesta = false;
                else if(consonantesSinTilde.indexOf(texto[2])==-1)
                    respuesta = false;
                break;
        }

        return respuesta;
    }

    function fechaValida(texto, siglo){
        let respuesta = true;

        if (soloNumeros(texto)){

            let     anioCurp = (1 * texto.substring(0,2)) + ((siglo==1) ? 1900 : 2000),
                    mesCurp = (1 * texto.substring(2,4)),
                    diaCurp = (1 * texto.substring(4,6));
            const   fecha = new Date(anioCurp, mesCurp-1, diaCurp);
            let     anioFecha = fecha.getFullYear(),
                    mesFecha = fecha.getMonth(),
                    diaFecha = fecha.getDate();
            
            if(anioCurp!=anioFecha || mesCurp!=mesFecha+1 || diaCurp!=diaFecha)
                respuesta = false;

        }else
            respuesta = false;

        return respuesta;
    }
        
    function soloNumeros(texto){
        let respuesta = true,
            i = 0;

        while (respuesta && i < texto.length){
            if (digitos.indexOf(texto[i]) == -1)
                respuesta = false;
            else
                i++;
        }

        return respuesta;
    }
        
    function calculaDigito(pseudoCurp){
        const   caracteres = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
                            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
                            "K", "L", "M", "N", "Ñ", "O", "P", "Q", "R", "S",
                            "T", "U", "V", "W", "X", "Y", "Z"],
                valores = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                            29, 30, 31, 32, 33, 34, 35, 36];
        let suma=0,
            posicion,
            valor,
            residuo;

        for (let i=0;i<pseudoCurp.length;i++){
            posicion=pseudoCurp.length-i+1;
            valor=valores[caracteres.indexOf(pseudoCurp[i])];
            suma+=posicion*valor;
        }
        residuo=suma%10;

        return (residuo!=0) ? 10-residuo : 0;

    }


    function generaPorciones(apellido1, apellido2, nombre){
        let porcion1 = "XXXX", porcion2="XXX",
            palabra, veces=0, cInterna;
        const nombres = nombre.split(" ");

        //apellido1
        palabra=encuentraPalabra(apellido1);
        porcion1=sustituyeANoTildada(palabra[0])+porcion1.substring(1);
        let i=1;
        while(i<palabra.length){
            if(vocales.indexOf(palabra[i])!=-1){
                porcion1=porcion1.substring(0,1)+sustituyeANoTildada(palabra[i])+porcion1.substring(2);
                i=palabra.length;
            }
            else
                i++;
        }
        cInterna=encuentraCInterna(palabra);
        porcion2=sustituyeANoTildada(cInterna)+porcion2.substring(1);

        //apellido2
        if(apellido2.length>0){
            palabra=encuentraPalabra(apellido2);
            porcion1=porcion1.substring(0,2)+sustituyeANoTildada(palabra[0])+porcion1.substring(3);
            cInterna=encuentraCInterna(palabra);
            porcion2=porcion2.substring(0,1)+sustituyeANoTildada(cInterna)+porcion2.substring(3);
        }

        //nombre
        // mientras existan palabras en el campo del nombre
        //      igualar el resultado a la palabra en turno
        //      si el resultado no está dentro de preposiciones
        //          si el resultado no está dentro de no son nombres
        //              hacemos que termine el while
        //          de lo contrario
        //              ¿es el segundo no son nombres?
        //                  si
        //                      que el while termine
        //                  no
        //                      que el while avance
        //      de lo contrario
        //          que el while avance
        i=0;
        while(i<nombres.length){
            palabra=nombres[i];
            if(preposiciones.indexOf(palabra)==-1){
                if(noSonNombres.indexOf(palabra)==-1){
                    i=nombres.length;
                }
                else{
                    veces++;
                    if(veces==2)
                        i=nombres.length;
                    else
                        i++;
                }
            }
            else
                i++;
        }
        porcion1=porcion1.substring(0,3)+sustituyeANoTildada(palabra[0]);
        cInterna=encuentraCInterna(palabra);
        porcion2=porcion2.substring(0,2)+sustituyeANoTildada(cInterna);

        if(inconvenientes.indexOf(porcion1)!=-1)
            porcion1=porcion1.substring(0,1)+"X"+porcion1.substring(2);

        return porcion1+porcion2;

    }

    function encuentraPalabra(texto){
        const   palabras = texto.split(" ");
        let     palabra = "",
                i = 0;

        while(i<palabras.length){
            if(preposiciones.indexOf(palabras[i])==-1){
                palabra=palabras[i];
                i=palabras.length;
            }
            else
                i++;
        }

        return palabra;
    }

    function sustituyeANoTildada(vocalSustituir){
        let resultado=vocalSustituir;
        switch(vocalSustituir){
            case "Á": resultado = "A"; break;
            case "É": resultado = "E"; break;
            case "Í": resultado = "I"; break;
            case "Ó": resultado = "O"; break;
            case "Ú": case "Ü": resultado = "U"; break;
            case "Ñ":
            case "'":
                resultado = "X"; break;
        }
        return resultado;
    }

    function encuentraCInterna(palabra){
        let i = 1,
            consonante = "X"; //si la palabra no tiene consonantes internas
                              //se devuelve una "X"

        while(i<palabra.length){
            if(consonantes.indexOf(palabra[i])!=-1){
                consonante=palabra[i];
                i=palabra.length;
            }
            else
                i++
        }

        return consonante;
    }
        
        const   letrasSinTildes = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
                                   "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
                consonantesSinTilde =   ["B", "C", "D", "F", "G", "H", "J", "K", "L", "M",
                                        "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z"],
                consonantesTildadas = ["Ñ"],
                consonantes = consonantesTildadas.concat("B", "C", "D", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z"),
                digitos = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
                segundaPos = ["A", "E", "I", "O", "U", "X"];

        const   preposiciones =     ["DA", "DAS", "DE", "DEL", "DER", "DI", "DIE",
                                    "DD", "Y", "EL", "LA", "LOS", "LAS", "LE", "LES",
                                    "MAC", "MC", "VAN", "VON"],
                noSonNombres = ["J", "J.", "JOSE", "JOSÉ", "M", "M.", "MA", "MA.", "MARIA", "MARÍA"],
                vocalesTildadas = ["Á", "É", "Í", "Ó", "Ú", "Ü"],
                vocales = vocalesTildadas.concat("A", "E", "I", "O", "U"),
                inconvenientes = ["BACA", "BAKA", "BUEI", "BUEY",
                                "CACA", "CACO", "CAGA", "CAGO", "CAKA", "CAKO", "COGE", "COGI", "COJA", "COJE", "COJI", "COJO", "COLA", "CULO",
                                "FALO", "FETO",
                                "GETA", "GUEI", "GUEY",
                                "JETA", "JOTO",
                                "KACA", "KACO", "KAGA", "KAGO", "KAKA", "KAKO", "KOGE", "KOGI", "KOJA", "KOJE", "KOJI", "KOJO", "KOLA", "KULO",
                                "LILO", "LOCA", "LOCO", "LOKA", "LOKO",
                                "MAME", "MAMO", "MEAR", "MEAS", "MEON", "MIAR", "MION", "MOCO", "MOKO", "MULA", "MULO",
                                "NACA", "NACO",
                                "PEDA", "PEDO", "PENE", "PIPI", "PITO", "POPO", "PUTA", "PUTO",
                                "QULO",
                                "RATA", "ROBA", "ROBE", "ROBO", "RUIN",
                                "SENO",
                                "TETA",
                                "VACA", "VAGA", "VAGO", "VAKA", "VUEI", "VUEY",
                                "WUEI", "WUEY"];
    
